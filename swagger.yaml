openapi: 3.0.0
info:
  title: 'ISP Mail Admin API'
  version: 1.0.0

servers:
  - url: 'example.org/api'
    description: 'ISP Mail Admin API'
  - url: https:hangukeo.eu
    description: Mail server API

security:
  - bearerAuth: []

paths:
  /login:
    post:
      summary: 'Authenticate to the API as an administrator'
      description: 'Admin Login'
      requestBody:
        description: 'Client side search object'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginObject'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObject'
        '401':
          description: Unauthorized
        '404':
          description: Resource Not Found

  /domain:
    post:
      security:
        - bearerAuth: []
      summary: Add a new domain
      description: 'Create a new domain'
      requestBody:
        description: 'Add a new domain'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainObject'
      responses:
        '201':
          description: Created

  /domain/{domain}:
    get:
      security:
        - bearerAuth: []
      summary: Get a domain information
      parameters:
          - in: path
            name: domain
            schema:
              type: string
            required: true
            description: string representing domain name
            example: example.org
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullDomainObject'
    delete:
      security:
        - bearerAuth: []
      summary: Delete a domain
      parameters:
        - in: path
          name: domain
          schema:
            type: string
          required: true
          description: string representing domain name
          example: example.org
      responses:
        '200':
          description: OK
        '400':
          description: 'Error : Bad Request'
  /users:
    get:
      security:
        - bearerAuth: []
      summary: Get list of users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListObject'
  /user:
    post:
      security:
        - bearerAuth: []
      summary: Create a new User
      description: 'Admin Login'
      requestBody:
        description: 'Client side search object'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserObject'
      responses:
        '201':
          description: 'Created'
        '400':
          description: 'Bad Request'

  /user/{email}:
    get:
      security:
        - bearerAuth: []
      summary: Get a user
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: email of user
          example: user@example.org
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisplayUserObject'
    put:
      security:
        - bearerAuth: []
      summary: Update info of a user
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: email of user
          example: user@example.org
      requestBody:
        description: 'Update user info'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserObject'
      responses:
        '201':
          description: OK
    delete:
      security:
        - bearerAuth: []
      summary: Delete a user
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: email of user
          example: user@example.org
      responses:
        '200':
          description: OK
        '400':
          description: 'Error : Bad Request'
    patch:
      security:
        - bearerAuth: []
      summary: Patch a user
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: email of user
          example: user@example.org
      requestBody:
        description: 'Field to patch'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUSerObject'
      responses:
        '200':
          description: OK
        '400':
          description: 'Error : Bad Request'

  /alias:
    post:
      summary: 'Create an alias'
      description: 'Alias input'
      requestBody:
        description: 'You should input source and destination of alias'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAliasObject'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
    get:
      security:
        - bearerAuth: []
      summary: Get list of aliases
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasListObject'


  /alias/source/{source}/destination/{destination}:
    delete:
      summary: 'Delete an alias'
      description: 'Alias input'
      parameters:
        - in: path
          name: source
          schema:
            type: string
          required: true
          description: string representing the source email
          example: source@example.org
        - in: path
          name: destination
          schema:
            type: string
          required: true
          description: string representing the source email
          example: source@example.org
      responses:
        '204':
          description: Deleted

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    AliasListObject:
      type: array
      items:
        $ref: '#/components/schemas/AliasObject'
    AliasObject:
      type: object
      required:
        - source
        - destination
      properties:
        source:
          type: string
          description: source@exemple.org
        destination:
          type: string
          description: destination@exemple.org
        id:
          type: string
          description: unique identifier uuid4
          example: 1f6e955a-234e-45b8-beaf-329107d0c0fa
        domain:
          type: string
          description: domain name
          example: example.orig
    PostAliasObject:
      type: object
      required:
        - source
        - destination
      properties:
        source:
          type: string
          description: source@exemple.org
        destination:
          type: string
          description: destination@exemple.org
    CreateUserObject:
        type: object
        required:
          - email
          - password
          - quota
        properties:
          email:
            type: string
            description: user@exemple.org
          password:
            type: string
            description: alongpassword min 12 chars
          quota:
            type: integer
            description: quota in ko
            example: 1073456
    LoginObject:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    DisplayUserObject:
      type: object
      properties:
        id:
          type: string
          example: 5dbe86ed-e3d6-45e4-a11c-5440fe356ac0
        email:
          type: string
          example: user@exemple.org
        quota:
          type: integer
          description: quota in ko
          example: 1073456
    DomainObject:
      properties:
        name:
          type: string
          example: exemple.org
    FullDomainObject:
      properties:
        id:
          type: string
          example: acff16ec-ddc0-416c-ab48-641717b749b1
        name:
          type: string
          example: exemple.org
    PatchUSerObject:
      type: object
      properties:
        password:
          type: string
          example: NewPasswordWithLength>12
        quota:
          type: integer
          description: quota in ko
          example: 1073456
    UpdateUserObject:
      type: object
      required:
        - password
        - quota
      properties:
        password:
          type: string
          description: alongpassword min 12 chars
        quota:
          type: integer
          description: quota in ko
          example: 1073456
    UserListObject:
      type: array
      items:
        $ref: '#/components/schemas/DisplayUserObject'
    TokenObject:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: 'auth_token'
          example:
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NzgxNDQyMzIsImV4cCI6MTU3ODE0NzgzMiwicm9sZXMiOlsiUk9MRV9BTUlOIl0sInVzZXJuYW1lIjoiZ29tcGFsIn0.JbBrhg-cj_0sLY588-V0eVi5e2GlWJZV42I4SQK0I5g9x1q5XXD_L4qB9sQ7tRuhmdKAnZMo7a0CdAA_fEgjv197VngRk0Id5FtJQKEWG7Eh2zF-NG5rkvG5t6oTtaFWez41XXxTZzay2jQNLeWPU-l2V_wTIgUJswZcAnBQtezWwLqq4n93jU1_cNa9kY9ZePPhsTWnbu8xAkaTU5GjHz01w1QjkPYCpLN4tNtQdnHH4YbtTGQi3rvg7UECqM8MeRtcXYQ-0iAJXTV8szgwwiaaMbtvmC44p2sTzRn2Q4REW3FqxfudBWlWNnrjN22267Hz3dxLwKMp93AHxuoi6xHCXQNX_MQz7EBkjhv-VFAWwzagyDXTQTNslZaDc7NKx1xCQtqwT1MXakihdEFK53EHt1hn4PXizeyA0Sj9z1BAv2SUAbEC-ny5BJNdQoZCnlMuUqQRTlnzaRAwd_8gO30deB_6LiFDEmejyeUtL1nQV-utY9K4JxtZ-jc0Spjrbw0GcrvaDvXM3BC7l6OqsvVSVmDWxs5xjQCYPiA6gTpU5NMYcmyDaNapBQp1-W7gVzajfBxc2iROGpkA1sb6U-Rx2CgPl1F7lbxq_sv0kZu979qm08T7pJV4RlswzaGP-BdPXDMCvwVPwzZO3-2M3Jl2m3_yPc8FPC-Bytvb1rY"
